#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import enum
import re
import subprocess
import sys

import elftools.elf.elffile
elflib = elftools.elf

0_0  # Python >= 3.6 is required

def attr2func(f):
    class attr2func:
        def __getattr__(self, name):
            return f(name)
    return attr2func()

def _gen_regexps():
    x = attr2func(lambda name: fr'(?P<{name}>[0-9a-f]+)')
    pid = r'\[\d+\]'
    vma = fr'(?P<elf>\S+)\[{x.vmstart}[+]{x.vmsize}\]'
    yield (
        # show_signal() in <arch/x86/kernel/traps.c>:
        fr'{pid} trap (?P<type>.*) ip:{x.ip} sp:{x.sp} error:{x.err} in {vma}'
    )
    yield (
        # show_signal_msg() in <arch/x86/mm/fault.c>:
        fr'{pid}: (?P<type>segfault) at {x.at} ip {x.ip} sp {x.sp} error {x.pf_err} in {vma}'
    )

regexps = [re.compile(r) for r in _gen_regexps()]

class Addr(int):

    def __new__(cls, addr):
        if isinstance(addr, str):
            addr = int(addr, 16)
        return super().__new__(cls, addr)

    def __add__(self, other):
        return Addr(super().__add__(other))

    def __sub__(self, other):
        return Addr(super().__sub__(other))

    def __str__(self):
        return f'0x{self:012X}'

class PFErrorCode(enum.IntFlag):

    # enum x86_pf_error_code in <arch/x86/include/asm/trap_pf.h>:
    X86_PF_PROT  = 1 << 0   # 0 = no page found; 1 = protection fault 
    X86_PF_WRITE = 1 << 1   # 0 = read access; 1 = write access 
    X86_PF_USER  = 1 << 2   # 0 = kernel-mode access; 1 = user-mode access 
    X86_PF_RSVD  = 1 << 3   # use of reserved bit detected 
    X86_PF_INSTR = 1 << 4   # fault was an instruction fetch 
    X86_PF_PK    = 1 << 5   # protection keys block access 
    X86_PF_SGX   = 1 << 15  # SGX MMU page-fault 

    def __str__(self):
        s = super().__str__()
        s = re.sub('^\w+[.]', '', s)
        s = re.sub('[|]', ' | ', s)
        return s

def fmt_err(err):
    if isinstance(err, str):
        err = int(err, 16)
    return f'0x{err:08X}'

def fmt_pf_err(err):
    if isinstance(err, str):
        err = int(err, 16)
    s = f'0x{err:04X}'
    if err != 0:
        s += f' ({PFErrorCode(err)})'
    return s

bland_types = {  # error code is always 0
    'divide error',
    'overflow',
    'invalid opcode',
    'coprocessor segment overrun',
    'bounds',
    'int3',
    'iret exception',
    'alignment check',
}

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-e', dest='elf', metavar='PATH', help='ELF file to look into')
    opts = ap.parse_args()
    prog = ap.prog
    n = 0
    for line in sys.stdin:
        for regexp in regexps:
            match = regexp.search(line)
            if match is not None:
                break
        else:
            print(f'{prog}: cannot parse:', line, file=sys.stderr)
        g = attr2func(match.group)
        if n > 0:
            print()
        print('Type:', g.type)
        try:
            err = g.err
        except IndexError:
            err = None
        if g.type in bland_types:
            assert err == '0'
            err = None
        if err is not None:
            print('Error:', fmt_err(err))
        try:
            err = g.pf_err
        except IndexError:
            pass
        else:
            print('Error:', fmt_pf_err(err))
        try:
            at = g.at
        except IndexError:
            pass
        else:
            print('At:', Addr(at))
        print('SP:', Addr(g.sp))
        elf = g.elf
        if opts.elf:
            elf = opts.elf
        print('Path:', elf)
        ip = Addr(g.ip)
        vmstart = Addr(g.vmstart)
        print('IP:', ip, '=', 'VMA +', ip - vmstart)
        print('VMA at:', vmstart)
        print('VMA size:', Addr(g.vmsize))
        if opts.elf:
            with open(opts.elf, 'rb') as fp:
                elffile = elflib.elffile.ELFFile(fp)
                xsegments = []
                for segment in elffile.iter_segments('PT_LOAD'):
                    if segment['p_flags'] & elflib.constants.P_FLAGS.PF_X:
                        xsegments += [segment]
            if len(xsegments) != 1:
                raise RuntimeError(f'found {len(xsegments)} executable segments in {elf}')
            [xsegment] = xsegments
            elf_vaddr = xsegment['p_vaddr']
            addr = ip - vmstart + elf_vaddr
            print('Source:', end=' ', flush=True)
            subprocess.run(['addr2line', '-e', elf, '-f', '-i', '-p', '-C', str(addr)])
        n += 1
    sys.exit(n == 0)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
